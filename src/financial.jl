"""
    expected_shortfall(returns, Œ±::Float64)

Calculate the expected shortfall `-ùîº[ r_p | r_p ‚â§ q_risk_level(r_p) ]`, where `r_p` is
the portfolio return and `q_risk_level(r_p)` is the `Œ±`-quantile of the
distribution of `r_p`.

NOTE: Expected shortfall is the _negative_ of the average of the bottom
`Œ±`-quantile of returns. Assuming average is positive for all `Œ±`, then
it is good to _minimise_ expected shortfall.
"""
function expected_shortfall(returns, Œ±::Float64)

    0 < Œ± < 1 || throw(ArgumentError("Œ±=$Œ± is not between 0 and 1."))

    last_index = floor(Int, Œ± * length(returns))
    last_index > 0 || throw(
        ArgumentError(string(
                "length(returns)=$(length(returns)) not enough elemnts for Œ±=$Œ±.",
                " Min length(returns)=$(ceil(Int, 1/Œ±))"
        ))
    )

    return mean(partialsort(returns, 1:last_index))
end

obs_arrangement(::typeof(expected_shortfall)) = IteratorOfObs()
